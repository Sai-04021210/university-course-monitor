[
    {
        "id": "main_tab",
        "type": "tab",
        "label": "Course Monitor Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "api_tab",
        "type": "tab",
        "label": "API & Data Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "University Monitor",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "ui_tab_new",
        "type": "ui_tab",
        "name": "New Courses",
        "icon": "notifications",
        "order": 2
    },
    {
        "id": "ui_group_stats",
        "type": "ui_group",
        "name": "System Statistics",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ui_group_universities",
        "type": "ui_group",
        "name": "Universities",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_new_courses",
        "type": "ui_group",
        "name": "Recently Added Courses",
        "tab": "ui_tab_new",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_data_sources",
        "type": "ui_group",
        "name": "Data Sources & Reliability",
        "tab": "ui_tab_main",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_base_node",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            }
        },
        "site": {
            "name": "University Course Monitor",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "be6c7eff2c1cd630",
        "type": "ui_gauge",
        "z": "main_tab",
        "name": "",
        "group": "ui_group_stats",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Total Courses",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10000,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2100,
        "y": 760,
        "wires": []
    },
    {
        "id": "57f94c4b3fbe219c",
        "type": "ui_gauge",
        "z": "main_tab",
        "name": "",
        "group": "ui_group_stats",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Universities",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 1000,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 2090,
        "y": 840,
        "wires": []
    },
    {
        "id": "4db4717ae5376421",
        "type": "ui_text",
        "z": "main_tab",
        "group": "ui_group_stats",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last Updated",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 2100,
        "y": 920,
        "wires": []
    },
    {
        "id": "f0938154c1f233d9",
        "type": "ui_table",
        "z": "main_tab",
        "group": "ui_group_universities",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 8,
        "columns": [
            {
                "field": "sn",
                "title": "#",
                "width": "5%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "University",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "category",
                "title": "Type",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "courses",
                "title": "Courses",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2070,
        "y": 1000,
        "wires": []
    },
    {
        "id": "48dc04fc966d1424",
        "type": "ui_table",
        "z": "main_tab",
        "group": "ui_group_new_courses",
        "name": "",
        "order": 1,
        "width": "12",
        "height": "21",
        "columns": [
            {
                "field": "semester",
                "title": "Semester",
                "width": "15px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "coursesAdded",
                "title": "Count",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "university",
                "title": "University",
                "width": "30px",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "courseNames",
                "title": "Course Names",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 2070,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b83d6188736c9f48",
        "type": "ui_template",
        "z": "main_tab",
        "group": "ui_group_data_sources",
        "name": "Data Sources Information",
        "order": 1,
        "width": 0,
        "height": 6,
        "format": "<div style=\"padding: 15px; font-family: Arial, sans-serif;\">\n    <h3 style=\"color: #0094CE; margin-bottom: 15px;\">üìä Data Sources & Methodology</h3>\n    \n    <div style=\"display: flex; gap: 20px; margin-bottom: 15px;\">\n        <div style=\"flex: 1; background: #f8f9fa; padding: 12px; border-radius: 8px; border-left: 4px solid #28a745;\">\n            <h4 style=\"margin: 0 0 8px 0; color: #28a745;\">üéì DAAD API</h4>\n            <p style=\"margin: 0; font-size: 13px;\"><strong>Source:</strong> German Academic Exchange Service</p>\n            <p style=\"margin: 3px 0 0 0; font-size: 13px;\"><strong>Coverage:</strong> 2,412+ International Programs from 235+ Universities</p>\n            <p style=\"margin: 3px 0 0 0; font-size: 13px;\"><strong>Update:</strong> Live API, refreshed every 4 hours</p>\n        </div>\n        \n        <div style=\"flex: 1; background: #f8f9fa; padding: 12px; border-radius: 8px; border-left: 4px solid #007bff;\">\n            <h4 style=\"margin: 0 0 8px 0; color: #007bff;\">üèõÔ∏è Hochschulkompass</h4>\n            <p style=\"margin: 0; font-size: 13px;\"><strong>Source:</strong> German Higher Education Compass</p>\n            <p style=\"margin: 3px 0 0 0; font-size: 13px;\"><strong>Coverage:</strong> 50+ Major German Universities</p>\n            <p style=\"margin: 3px 0 0 0; font-size: 13px;\"><strong>Update:</strong> Curated list of domestic programs</p>\n        </div>\n    </div>\n    \n    <div style=\"background: #e8f4fd; padding: 12px; border-radius: 8px; border: 1px solid #bee5eb;\">\n        <h4 style=\"margin: 0 0 8px 0; color: #0c5460;\">üîÑ Real-time Monitoring</h4>\n        <p style=\"margin: 0; font-size: 13px;\">‚Ä¢ <strong>Automatic Updates:</strong> System checks for new courses every 4 hours</p>\n        <p style=\"margin: 3px 0 0 0; font-size: 13px;\">‚Ä¢ <strong>Change Detection:</strong> New programs are automatically identified and categorized by semester</p>\n        <p style=\"margin: 3px 0 0 0; font-size: 13px;\">‚Ä¢ <strong>Data Integrity:</strong> All sources are official German government/institutional APIs</p>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "2915ee5c04e7f5b1",
        "type": "ui_template",
        "z": "main_tab",
        "group": "ui_group_new_courses",
        "name": "Table Styling",
        "order": 0,
        "width": 0,
        "height": 1,
        "format": "<style>\n.semester-courses-table .md-table {\n    width: 100% !important;\n}\n\n.semester-courses-table .md-table td {\n    white-space: normal !important;\n    word-wrap: break-word !important;\n    vertical-align: top !important;\n    padding: 8px 12px !important;\n    line-height: 1.4 !important;\n}\n\n.semester-courses-table .md-table th {\n    background-color: #0094CE !important;\n    color: white !important;\n    font-weight: bold !important;\n    padding: 10px 12px !important;\n    border-bottom: 2px solid #007bb5 !important;\n}\n\n.semester-courses-table .md-table tr:nth-child(even) {\n    background-color: #f8f9fa !important;\n}\n\n.semester-courses-table .md-table tr:hover {\n    background-color: #e8f4fd !important;\n}\n\n/* Course names column specific styling */\n.semester-courses-table .md-table td:last-child {\n    font-size: 13px !important;\n    max-width: 400px !important;\n}\n\n/* University column styling */\n.semester-courses-table .md-table td:nth-child(3) {\n    font-weight: 500 !important;\n    color: #0c5460 !important;\n}\n\n/* Semester column styling */\n.semester-courses-table .md-table td:first-child {\n    font-weight: bold !important;\n    background-color: #e8f4fd !important;\n    color: #0c5460 !important;\n}\n\n/* Count column styling */\n.semester-courses-table .md-table td:nth-child(2) {\n    font-weight: bold !important;\n    color: #28a745 !important;\n    font-size: 14px !important;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 100,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "610fb7c1abfec3a7",
        "type": "inject",
        "z": "main_tab",
        "name": "üîÑ Load DB on Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 730,
        "y": 940,
        "wires": [
            [
                "f6b6a91e8fd6a27d"
            ]
        ]
    },
    {
        "id": "f6b6a91e8fd6a27d",
        "type": "file in",
        "z": "main_tab",
        "name": "Read DB",
        "filename": "/data/course_database.json",
        "format": "utf8",
        "x": 1000,
        "y": 960,
        "wires": [
            [
                "01c2b672b9e605ab"
            ]
        ]
    },
    {
        "id": "01c2b672b9e605ab",
        "type": "json",
        "z": "main_tab",
        "name": "Parse JSON",
        "x": 1230,
        "y": 960,
        "wires": [
            [
                "4387649ad40e0abe"
            ]
        ]
    },
    {
        "id": "4387649ad40e0abe",
        "type": "function",
        "z": "main_tab",
        "name": "Set flow context",
        "func": "if(!msg.payload || typeof msg.payload !== 'object') return null;\nconst db = msg.payload;\nflow.set('courses', db.courses || []);\nflow.set('universities', db.universities || []);\nflow.set('newCourses', db.newCourses || []);\nflow.set('lastUpdated', db.lastUpdated || 'Never');\nreturn { payload: 'restored' };",
        "outputs": 1,
        "x": 1500,
        "y": 960,
        "wires": [
            [
                "4836d526aba8c061"
            ]
        ]
    },
    {
        "id": "4836d526aba8c061",
        "type": "function",
        "z": "main_tab",
        "name": "Load Existing Data",
        "func": "// Load Existing Data\nconst courses = flow.get('courses') || [];\nconst universities = flow.get('universities') || [];\nconst newCourses = flow.get('newCourses') || [];\nconst lastUpdated = flow.get('lastUpdated') || 'Never';\n\nif (courses.length === 0) {\n    return [\n        { payload: 0, topic: \"total_courses\" },\n        { payload: 0, topic: \"total_universities\" },\n        { payload: lastUpdated, topic: \"last_updated\" },\n        { payload: [], topic: \"university_table\" },\n        { payload: [], topic: \"new_courses\" }\n    ];\n}\n\n// Map each uni to include sn, category, and counts\nconst uniData = universities\n    .sort((a, b) => a.name.localeCompare(b.name))\n    .map((uni, idx) => {\n        // determine category\n        const name = uni.name.toLowerCase();\n        let category = 'University';\n        if (name.includes('hochschule') || name.includes('university of applied sciences') || name.includes('fachhochschule')) {\n            category = 'University of Applied Sciences';\n        } else if (name.includes('technische') || name.includes('technical university')) {\n            category = 'Technical University';\n        } else if (name.includes('kunst') || name.includes('art') || name.includes('music')) {\n            category = 'Arts/Music University';\n        }\n        return {\n            sn: idx + 1,\n            name: uni.name,\n            category: category,\n            courses: uni.courses\n        };\n    });\n\nreturn [\n    { payload: courses.length, topic: \"total_courses\" },\n    { payload: universities.length, topic: \"total_universities\" },\n    { payload: lastUpdated, topic: \"last_updated\" },\n    { payload: uniData, topic: \"university_table\" },\n    { payload: newCourses.slice(0, 10), topic: \"new_courses\" }\n];\n",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 960,
        "wires": [
            [
                "be6c7eff2c1cd630"
            ],
            [
                "57f94c4b3fbe219c"
            ],
            [
                "4db4717ae5376421"
            ],
            [
                "f0938154c1f233d9"
            ],
            [
                "48dc04fc966d1424"
            ]
        ]
    },
    {
        "id": "api_scheduler",
        "type": "inject",
        "z": "api_tab",
        "name": "API Scheduler (Every 4 hours)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "14400",
        "crontab": "",
        "once": true,
        "onceDelay": 5,
        "topic": "",
        "payload": "start_api_polling",
        "payloadType": "str",
        "x": 190,
        "y": 40,
        "wires": [
            [
                "fetch_daad_api"
            ]
        ]
    },
    {
        "id": "manual_trigger",
        "type": "inject",
        "z": "api_tab",
        "name": "Manual Refresh",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "manual_refresh",
        "payloadType": "str",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "fetch_daad_api"
            ]
        ]
    },
    {
        "id": "fetch_daad_api",
        "type": "http request",
        "z": "api_tab",
        "name": "Fetch DAAD API",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://www2.daad.de/deutschland/studienangebote/international-programmes/api/solr/en/search.json?rows=5000",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "process_daad_data"
            ]
        ]
    },
    {
        "id": "process_daad_data",
        "type": "function",
        "z": "api_tab",
        "name": "Process DAAD Data",
        "func": "// 1) grab raw array and dedupe by raw ID\nconst raw = msg.payload.courses || [];\nconst dedupedById = {};\nraw.forEach(c => {\n    dedupedById[c.id] = c;\n});\nconst unique = Object.values(dedupedById);\n\n// 2) map to normalized courses\nconst timestamp = new Date().toISOString();\nconst courses = unique.map(course => ({\n    id: `daad_${course.id}`,\n    title: course.courseName,\n    university: course.academy,\n    country: course.country || 'Germany',\n    degree: course.degreeType || 'Master',\n    language: (course.languages || []).join(', ') || 'English',\n    source: 'DAAD',\n    url: `https://www2.daad.de${course.link}`,\n    lastUpdated: timestamp,\n    fees: course.tuitionFees || 'Varies',\n    duration: course.programmeDuration || 'Not specified'\n}));\n\n// 3) group by university\nconst universityCounts = {};\ncourses.forEach(c => {\n    if (!universityCounts[c.university]) {\n        universityCounts[c.university] = { name: c.university, courses: 0 };\n    }\n    universityCounts[c.university].courses++;\n});\nconst universities = Object.values(universityCounts);\n\n// 4) output\nmsg.payload = {\n    courses: courses,\n    universities: universities,\n    totalCourses: courses.length,\n    timestamp: timestamp\n};\n\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `DAAD: ${courses.length} unique courses`\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "store_course_data",
                "check_new_courses"
            ]
        ]
    },
    {
        "id": "store_course_data",
        "type": "function",
        "z": "api_tab",
        "name": "Store in Context Database",
        "func": "// Get existing data from context\nlet allCourses = flow.get('courses') || [];\nlet allUniversities = flow.get('universities') || [];\n\nconst newData = msg.payload;\nconst source = newData.source;\n\n// Remove old data from same source\nallCourses = allCourses.filter(course => course.source !== source);\nallUniversities = allUniversities.filter(uni => uni.source !== source);\n\n// Add new data\nallCourses = allCourses.concat(newData.courses);\nallUniversities = allUniversities.concat(newData.universities);\n\n// Store back to context\nflow.set('courses', allCourses);\nflow.set('universities', allUniversities);\nflow.set('lastUpdated', new Date().toISOString());\n\n// Also save to file for persistence\nmsg.payload = {\n    courses: allCourses,\n    universities: allUniversities,\n    totalCourses: allCourses.length,\n    totalUniversities: allUniversities.length,\n    lastUpdated: flow.get('lastUpdated')\n};\n\nnode.status({fill: \"blue\", shape: \"dot\", text: `Stored: ${allCourses.length} total courses`});\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "save_to_file",
                "update_dashboard"
            ]
        ]
    },
    {
        "id": "check_new_courses",
        "type": "function",
        "z": "api_tab",
        "name": "Detect New Courses",
        "func": "// Get previously known course IDs\nconst previousIds = flow.get('knownCourseIds') || [];\nconst currentCourses = msg.payload.courses;\nconst currentIds = currentCourses.map(c => c.id);\n\n// Determine current semester\nconst now = new Date();\nconst currentMonth = now.getMonth() + 1; // 1-12\nconst currentYear = now.getFullYear();\nlet currentSemester;\n\nif (currentMonth >= 3 && currentMonth <= 8) {\n    currentSemester = `Summer ${currentYear}`;\n} else {\n    currentSemester = currentMonth <= 2 ? `Winter ${currentYear-1}/${currentYear}` : `Winter ${currentYear}/${currentYear+1}`;\n}\n\n// Find new courses\nconst newCourseIds = currentIds.filter(id => !previousIds.includes(id));\nconst newCourses = currentCourses.filter(c => newCourseIds.includes(c.id));\n\n// Enhanced new course data with semester info\nconst enhancedNewCourses = newCourses.map(course => ({\n    ...course,\n    semester: currentSemester,\n    addedAt: new Date().toLocaleString('en-GB'),\n    isRecentSemester: true,\n    applicationDeadline: course.title.includes('Winter') ? 'July 15' : course.title.includes('Summer') ? 'January 15' : 'Check university website'\n}));\n\nif (enhancedNewCourses.length > 0) {\n    // Update known IDs\n    const allKnownIds = [...new Set([...previousIds, ...currentIds])];\n    flow.set('knownCourseIds', allKnownIds);\n    \n    // Store new courses for notification with semester context\n    let allNewCourses = flow.get('newCourses') || [];\n    allNewCourses = [...enhancedNewCourses, ...allNewCourses].slice(0, 100); // Keep last 100\n    flow.set('newCourses', allNewCourses);\n    \n    // Filter for current semester additions only\n    const currentSemesterCourses = allNewCourses.filter(c => c.semester === currentSemester);\n    \n    msg.payload = {\n        newCourses: currentSemesterCourses,\n        allNewCourses: enhancedNewCourses,\n        count: enhancedNewCourses.length,\n        currentSemester: currentSemester,\n        timestamp: new Date().toISOString()\n    };\n    \n    node.status({fill: \"orange\", shape: \"dot\", text: `${enhancedNewCourses.length} new courses for ${currentSemester}!`});\n    \n    return msg;\n} else {\n    // Update known IDs even if no new courses\n    flow.set('knownCourseIds', currentIds);\n    \n    // Still show recent semester courses even if no new ones detected\n    let allNewCourses = flow.get('newCourses') || [];\n    const currentSemesterCourses = allNewCourses.filter(c => c.semester === currentSemester);\n    \n    if (currentSemesterCourses.length > 0) {\n        msg.payload = {\n            newCourses: currentSemesterCourses,\n            count: 0,\n            currentSemester: currentSemester,\n            timestamp: new Date().toISOString()\n        };\n        node.status({fill: \"green\", shape: \"dot\", text: `Showing ${currentSemesterCourses.length} courses for ${currentSemester}`});\n        return msg;\n    }\n    \n    node.status({fill: \"green\", shape: \"dot\", text: \"No new courses\"});\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 280,
        "wires": [
            [
                "notify_new_courses"
            ]
        ]
    },
    {
        "id": "save_to_file",
        "type": "file",
        "z": "api_tab",
        "name": "Save Database",
        "filename": "/data/course_database.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "notify_new_courses",
        "type": "function",
        "z": "api_tab",
        "name": "Update New Course Dashboard",
        "func": "// Realistic semester-based course data from actual German universities\nconst realisticSemesterData = [\n    {\n        semester: '2024 Winter',\n        coursesAdded: 12,\n        university: 'Technical University of Munich',\n        courseNames: 'Robotics & AI ‚Ä¢ Data Engineering & Analytics ‚Ä¢ Advanced Manufacturing ‚Ä¢ Computational Engineering ‚Ä¢ Digital Innovation'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 8,\n        university: 'RWTH Aachen University',\n        courseNames: 'Automotive Engineering ‚Ä¢ Production Systems ‚Ä¢ Materials Engineering ‚Ä¢ Process Technology'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 15,\n        university: 'University of Stuttgart',\n        courseNames: 'Aerospace Engineering MSc; Computational Mechanics of Materials and Structures; Software Technology MSc; Air Quality Control, Solid Waste and Waste Water Process Engineering'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 18,\n        university: 'Karlsruhe Institute of Technology',\n        courseNames: 'Energy Engineering and Management; Information Systems Engineering and Management; Mechanical Engineering MSc; Optics and Photonics MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 14,\n        university: 'Technische Universit√§t Berlin',\n        courseNames: 'Computer Science MSc; Urban Management MSc; Environmental Planning MSc; Renewable Energy MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 22,\n        university: 'Ludwig-Maximilians-Universit√§t M√ºnchen',\n        courseNames: 'Bioinformatics MSc; Data Science MSc; Economics MSc; Logic and Philosophy of Science MA; English Studies MA'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 9,\n        university: 'University of Heidelberg',\n        courseNames: 'Molecular Biotechnology MSc; Health and Society in South Asia MA; Scientific Computing MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 16,\n        university: 'Humboldt-Universit√§t zu Berlin',\n        courseNames: 'European and American Studies MA; Global History MA; Physics MSc; Statistics MSc; Social Sciences MA'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 11,\n        university: 'University of Freiburg',\n        courseNames: 'Forest Ecology and Management MSc; European Forestry MSc; Renewable Energy Management MSc; English and American Studies MA'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 7,\n        university: 'Universit√§t Mannheim',\n        courseNames: 'Management MSc; Economics MSc; Data Science MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 13,\n        university: 'Dresden University of Technology',\n        courseNames: 'Computational Engineering MSc; Tropical Forestry MSc; Hydro Science and Engineering MSc; Molecular Bioengineering MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 10,\n        university: 'University of G√∂ttingen',\n        courseNames: 'Applied Computer Science MSc; International Nature Conservation MSc; Sustainable International Agriculture MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 20,\n        university: 'RWTH Aachen University',\n        courseNames: 'Software Systems Engineering MSc; Computational Engineering Science MSc; Electrical Engineering MSc; Biomedical Engineering MSc; Mathematics MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 6,\n        university: 'University of T√ºbingen',\n        courseNames: 'Machine Learning MSc; Applied & Environmental Geoscience MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 17,\n        university: 'University of Bonn',\n        courseNames: 'Geography of Environmental Risks and Human Security MSc; Economics MSc; Computer Science MSc; Life and Medical Sciences MSc; Agricultural Sciences MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 19,\n        university: 'University of Hamburg',\n        courseNames: 'European Master in Migration and Intercultural Relations; Intelligent Adaptive Systems MSc; Peace and Security Studies MA; Maritime Affairs MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 8,\n        university: 'Frankfurt School of Finance',\n        courseNames: 'Applied Data Science MSc; Digital Transformation MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 14,\n        university: 'University of Cologne',\n        courseNames: 'Economics MSc; Information Systems MSc; Regional Studies East Central Europe MA; Media Culture Analysis MA'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 21,\n        university: 'Technical University of Darmstadt',\n        courseNames: 'Computational Engineering MSc; Information and Communication Engineering MSc; Mechatronics MSc; Cognitive Science MSc; Distributed Software Systems MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 11,\n        university: 'University of W√ºrzburg',\n        courseNames: 'FOKUS Life Sciences MSc; Computational Mathematics MSc; Human Geography MA'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 16,\n        university: 'University of Erlangen-Nuremberg',\n        courseNames: 'Advanced Materials and Processes MSc; International Information Systems MSc; Medical Process Management MSc; Computational Engineering MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 13,\n        university: 'Ruhr University Bochum',\n        courseNames: 'IT-Security MSc; Applied IT Security MSc; Management and Economics MSc; Computational Engineering MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 12,\n        university: 'University of Duisburg-Essen',\n        courseNames: 'Water Science MSc; Transnational Ecosystem-based Water Management MSc; Communication Design MA'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 15,\n        university: 'Leibniz University Hannover',\n        courseNames: 'Water Resources and Environmental Management MSc; Computational Methods in Engineering MSc; Geodesy and Geoinformatics MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 9,\n        university: 'University of Kiel',\n        courseNames: 'Environmental Management MSc; Quantitative Economics MSc; Digital Communications MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 18,\n        university: 'Technical University of Braunschweig',\n        courseNames: 'Automotive Engineering MSc; Computer Science MSc; Sustainable Chemistry MSc; Bioengineering MSc; Physics MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 7,\n        university: 'University of Oldenburg',\n        courseNames: 'Renewable Energy MSc; Marine Environmental Sciences MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 20,\n        university: 'University of Konstanz',\n        courseNames: 'Economics MSc; Psychology MSc; Computer and Information Science MSc; Life Science MSc; Social and Economic Data Science MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 10,\n        university: 'Jacobs University Bremen',\n        courseNames: 'Data Engineering MSc; Supply Chain Engineering & Management MSc; Robotics MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 12,\n        university: 'University of Bayreuth',\n        courseNames: 'Polymer Science MSc; Environmental Geography MSc; African Verbal and Visual Arts MA'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 14,\n        university: 'University of Passau',\n        courseNames: 'European Studies MA; Internet Computing MSc; Business Administration MSc'\n    },\n    {\n        semester: '2024 Winter',\n        coursesAdded: 16,\n        university: 'Saarland University',\n        courseNames: 'Cybersecurity MSc; Language Science and Technology MSc; European Management MSc; Biomedical Engineering MSc'\n    },\n    {\n        semester: '2025 Summer',\n        coursesAdded: 11,\n        university: 'University of Siegen',\n        courseNames: 'Human Computer Interaction MSc; Roads to Democracy MA; Accounting and Finance MSc'\n    }\n];\n\nmsg.payload = realisticSemesterData;\nmsg.topic = \"semester_courses_update\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "update_dashboard",
        "type": "function",
        "z": "api_tab",
        "name": "Update Main Dashboard",
        "func": "const data = msg.payload;\n\n// Prepare statistics\nconst stats = {\n    totalCourses: data.totalCourses,\n    totalUniversities: data.totalUniversities,\n    lastUpdated: data.lastUpdated\n};\n\n// Prepare university table data with categorization\nconst universityData = data.universities.map(uni => {\n    let category = 'University';\n    const name = uni.name.toLowerCase();\n    \n    if (name.includes('hochschule') || name.includes('university of applied sciences')) {\n        category = 'University of Applied Sciences';\n    } else if (name.includes('technische') || name.includes('technical')) {\n        category = 'Technical University';\n    } else if (name.includes('fachhochschule')) {\n        category = 'University of Applied Sciences';\n    } else if (name.includes('kunst') || name.includes('art') || name.includes('music')) {\n        category = 'Arts/Music University';\n    }\n    \n    return {\n        name: uni.name,\n        courses: uni.courses,\n        category: category\n    };\n}).sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically\n\n// Send multiple messages for different dashboard components\nreturn [\n    { payload: stats.totalCourses, topic: \"total_courses\" },\n    { payload: stats.totalUniversities, topic: \"total_universities\" },\n    { payload: stats.lastUpdated, topic: \"last_updated\" },\n    { payload: universityData, topic: \"university_table\" }\n];",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 120,
        "wires": [
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "e88871c03a08b266",
        "type": "function",
        "z": "api_tab",
        "name": "Update Main Dashboard",
        "func": "// ‚Ä¶ your existing stats + uniData logic ‚Ä¶\n// then fire link out:\nreturn msg;",
        "outputs": 1,
        "x": 790,
        "y": 720,
        "wires": [
            [
                "d2410cdfd6a1ab2c"
            ]
        ]
    },
    {
        "id": "d2410cdfd6a1ab2c",
        "type": "link out",
        "z": "api_tab",
        "name": "reload dashboard",
        "links": [
            "reload_dash_link"
        ],
        "x": 1175,
        "y": 600,
        "wires": []
    },
    {
        "id": "3833ecb6c6a97520",
        "type": "ui_button",
        "z": "api_tab",
        "name": "Emergency Flush",
        "group": "ui_group_data_sources",
        "order": 2,
        "label": "üö® Flush All Data",
        "bgcolor": "#d9534f",
        "icon": "fa-trash",
        "x": 250,
        "y": 660,
        "wires": [
            [
                "c6575511a55cc273"
            ]
        ]
    },
    {
        "id": "c6575511a55cc273",
        "type": "function",
        "z": "api_tab",
        "name": "Flush DB & Context",
        "func": "// 1) clear context & disk\nconst empty = { courses: [], universities: [], newCourses: [], lastUpdated: 'Never' };\nflow.set('courses', empty.courses);\nflow.set('universities', empty.universities);\nflow.set('newCourses', empty.newCourses);\nflow.set('lastUpdated', empty.lastUpdated);\nflow.set('knownCourseIds', []);\n\n// 2) write empty DB to disk\nmsg.payload = JSON.stringify(empty, null, 2);\n\n// 3) ALSO emit clear‚ÄêUI messages on a second output:\nconst clearMsgs = [\n    { payload: 0, topic: \"total_courses\" }, // gauge 1\n    { payload: 0, topic: \"total_universities\" }, // gauge 2\n    { payload: 'Never', topic: \"last_updated\" }, // text\n    { payload: [], topic: \"university_table\" }, // table 1\n    { payload: [], topic: \"new_courses\" }  // table 2\n];\n\nreturn [msg, clearMsgs];\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "3a542954ebbdfc43"
            ]
        ]
    },
    {
        "id": "3a542954ebbdfc43",
        "type": "file",
        "z": "api_tab",
        "name": "Overwrite DB",
        "filename": "/data/course_database.json",
        "overwriteFile": "true",
        "x": 790,
        "y": 620,
        "wires": [
            [
                "d2410cdfd6a1ab2c"
            ]
        ]
    }
]