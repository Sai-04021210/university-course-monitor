[
    {
        "id": "main_tab",
        "type": "tab",
        "label": "Course Monitor Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "api_tab",
        "type": "tab",
        "label": "API & Data Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "monitor_tab",
        "type": "tab",
        "label": "üîî Daily Monitoring",
        "disabled": false,
        "info": "Automated daily monitoring for new English-taught programmes"
    },
    {
        "id": "ea553a0b38d67ae1",
        "type": "group",
        "z": "main_tab",
        "name": "üìÇ Data Initialization & Loading",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "610fb7c1abfec3a7",
            "f6b6a91e8fd6a27d",
            "01c2b672b9e605ab",
            "4387649ad40e0abe",
            "4836d526aba8c061",
            "load_universities_for_selector",
            "filter_courses_by_university",
            "university_selector",
            "populate_university_selector"
        ],
        "x": 14,
        "y": 281.5,
        "w": 1752,
        "h": 219.5
    },
    {
        "id": "6b00bc2cfff9870a",
        "type": "group",
        "z": "main_tab",
        "name": "üîç Filter Controls & Logic",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "filter_degree_type",
            "filter_tuition_fee",
            "filter_language",
            "apply_filters",
            "reset_filter_values",
            "init_filters",
            "reset_filters"
        ],
        "x": 74,
        "y": 599,
        "w": 1132,
        "h": 262
    },
    {
        "id": "09254e3fcc8249fb",
        "type": "group",
        "z": "main_tab",
        "name": "üìä Dashboard Statistics",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "be6c7eff2c1cd630",
            "57f94c4b3fbe219c",
            "4db4717ae5376421",
            "f0938154c1f233d9",
            "48dc04fc966d1424",
            "course_table"
        ],
        "x": 1834,
        "y": 179,
        "w": 232,
        "h": 462
    },
    {
        "id": "60ee1b8cd88bd9c1",
        "type": "group",
        "z": "main_tab",
        "name": "üé® Styling & Templates",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b83d6188736c9f48",
            "2915ee5c04e7f5b1"
        ],
        "x": 214,
        "y": 39,
        "w": 272,
        "h": 142
    },
    {
        "id": "c19452ddee5fb968",
        "type": "group",
        "z": "api_tab",
        "name": "üßπ Data Flush & Reset",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "clear_dashboard_after_flush"
        ],
        "x": 914,
        "y": 574,
        "w": 232,
        "h": 172
    },
    {
        "id": "3c03637913376ef3",
        "type": "group",
        "z": "api_tab",
        "name": "üîÑ Dashboard Reload",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e88871c03a08b266",
            "d2410cdfd6a1ab2c"
        ],
        "x": 134,
        "y": 799,
        "w": 402,
        "h": 82
    },
    {
        "id": "ui_tab_main",
        "type": "ui_tab",
        "name": "University Monitor",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ui_tab_new",
        "type": "ui_tab",
        "name": "New Courses",
        "icon": "notifications",
        "order": 3
    },
    {
        "id": "ui_tab_courses",
        "type": "ui_tab",
        "name": "All Courses",
        "icon": "list",
        "order": 2
    },
    {
        "id": "ui_group_stats",
        "type": "ui_group",
        "name": "System Statistics",
        "tab": "ui_tab_main",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ui_group_universities",
        "type": "ui_group",
        "name": "Universities",
        "tab": "ui_tab_main",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_new_courses",
        "type": "ui_group",
        "name": "Recently Added Courses",
        "tab": "ui_tab_new",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_group_data_sources",
        "type": "ui_group",
        "name": "Data Sources & Reliability",
        "tab": "ui_tab_main",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ui_base_node",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "University Course Monitor",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ui_group_courses",
        "type": "ui_group",
        "name": "Course Listings",
        "tab": "ui_tab_courses",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "postgres_config",
        "type": "postgreSQLConfig",
        "name": "Course Monitor DB",
        "host": "postgres",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "course_monitor",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "course_user",
        "userFieldType": "str",
        "password": "course_monitor_secure_password_2024",
        "passwordFieldType": "str"
    },
    {
        "id": "ui_group_filters",
        "type": "ui_group",
        "name": "University Filters",
        "tab": "ui_tab_courses",
        "order": 0,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "be6c7eff2c1cd630",
        "type": "ui_gauge",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "name": "",
        "group": "ui_group_stats",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Total Courses",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 10000,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1960,
        "y": 220,
        "wires": []
    },
    {
        "id": "57f94c4b3fbe219c",
        "type": "ui_gauge",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "name": "",
        "group": "ui_group_stats",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "wave",
        "title": "Universities",
        "label": "",
        "format": "{{value}}",
        "min": 0,
        "max": 1000,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1950,
        "y": 300,
        "wires": []
    },
    {
        "id": "4db4717ae5376421",
        "type": "ui_text",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "group": "ui_group_stats",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last Updated",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1960,
        "y": 380,
        "wires": []
    },
    {
        "id": "f0938154c1f233d9",
        "type": "ui_table",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "group": "ui_group_universities",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 8,
        "columns": [
            {
                "field": "sn",
                "title": "#",
                "width": "5%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "name",
                "title": "University",
                "width": "50%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "category",
                "title": "Type",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "courses",
                "title": "Courses",
                "width": "20%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1930,
        "y": 460,
        "wires": []
    },
    {
        "id": "48dc04fc966d1424",
        "type": "ui_table",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "group": "ui_group_new_courses",
        "name": "",
        "order": 1,
        "width": "12",
        "height": "21",
        "columns": [
            {
                "field": "semester",
                "title": "Semester",
                "width": "15px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "coursesAdded",
                "title": "Count",
                "width": "5px",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "university",
                "title": "University",
                "width": "30px",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "courseNames",
                "title": "Course Names",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1930,
        "y": 540,
        "wires": []
    },
    {
        "id": "course_table",
        "type": "ui_table",
        "z": "main_tab",
        "g": "09254e3fcc8249fb",
        "group": "ui_group_courses",
        "name": "Course Listings",
        "order": 1,
        "width": "12",
        "height": "15",
        "columns": [
            {
                "field": "title",
                "title": "Programme Name",
                "width": "40%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "university",
                "title": "University",
                "width": "25%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "degree",
                "title": "Degree",
                "width": "8%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "language",
                "title": "Language",
                "width": "12%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "tuition",
                "title": "Tuition",
                "width": "10%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "location",
                "title": "Location",
                "width": "10%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 0,
        "cts": false,
        "x": 1940,
        "y": 600,
        "wires": []
    },
    {
        "id": "b83d6188736c9f48",
        "type": "ui_template",
        "z": "main_tab",
        "g": "60ee1b8cd88bd9c1",
        "group": "ui_group_data_sources",
        "name": "Data Sources Information",
        "order": 1,
        "width": 0,
        "height": 6,
        "format": "<div style=\"padding: 15px; font-family: Arial, sans-serif;\">\n    <h3 style=\"color: #0094CE; margin-bottom: 15px;\">üóúÔ∏è PostgreSQL Database Integration</h3>\n    \n    <div style=\"display: flex; gap: 15px; margin-bottom: 15px;\">\n        <div style=\"flex: 1; background: #f8f9fa; padding: 10px; border-radius: 8px; border-left: 4px solid #28a745;\">\n            <h4 style=\"margin: 0 0 6px 0; color: #28a745; font-size: 14px;\">üåç DAAD International</h4>\n            <p style=\"margin: 0; font-size: 12px;\"><strong>Source:</strong> DAAD International API</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Coverage:</strong> 2,400+ International Programs</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Focus:</strong> English-taught international programs</p>\n        </div>\n        \n        <div style=\"flex: 1; background: #f8f9fa; padding: 10px; border-radius: 8px; border-left: 4px solid #007bff;\">\n            <h4 style=\"margin: 0 0 6px 0; color: #007bff; font-size: 14px;\">üìö DAAD All Programmes</h4>\n            <p style=\"margin: 0; font-size: 12px;\"><strong>Source:</strong> DAAD Extended Database</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Coverage:</strong> 15+ Additional Universities</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Focus:</strong> Master's programs & specialized degrees</p>\n        </div>\n        \n        <div style=\"flex: 1; background: #f8f9fa; padding: 10px; border-radius: 8px; border-left: 4px solid #dc3545;\">\n            <h4 style=\"margin: 0 0 6px 0; color: #dc3545; font-size: 14px;\">üá©üá™ Hochschulkompass</h4>\n            <p style=\"margin: 0; font-size: 12px;\"><strong>Source:</strong> German Rectors' Conference</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Coverage:</strong> 15+ Major Universities</p>\n            <p style=\"margin: 2px 0 0 0; font-size: 12px;\"><strong>Focus:</strong> German-taught domestic programs</p>\n        </div>\n    </div>\n    \n    <div style=\"background: #e8f4fd; padding: 12px; border-radius: 8px; border: 1px solid #bee5eb;\">\n        <h4 style=\"margin: 0 0 8px 0; color: #0c5460;\">üîÑ Comprehensive Coverage System</h4>\n        <p style=\"margin: 0; font-size: 13px;\">‚Ä¢ <strong>Triple Integration:</strong> International, extended, and domestic German programs</p>\n        <p style=\"margin: 3px 0 0 0; font-size: 13px;\">‚Ä¢ <strong>Smart Filtering:</strong> Filter by degree type, tuition fees, and language across all sources</p>\n        <p style=\"margin: 3px 0 0 0; font-size: 13px;\">‚Ä¢ <strong>Synchronized Updates:</strong> All three sources refreshed simultaneously every 4 hours</p>\n        <p style=\"margin: 3px 0 0 0; font-size: 13px;\">‚Ä¢ <strong>Complete Coverage:</strong> Bachelor's, Master's, PhD, and State Examination programs</p>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 350,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2915ee5c04e7f5b1",
        "type": "ui_template",
        "z": "main_tab",
        "g": "60ee1b8cd88bd9c1",
        "group": "ui_group_new_courses",
        "name": "Table Styling",
        "order": 0,
        "width": 0,
        "height": 1,
        "format": "<style>\n.semester-courses-table .md-table {\n    width: 100% !important;\n}\n\n.semester-courses-table .md-table td {\n    white-space: normal !important;\n    word-wrap: break-word !important;\n    vertical-align: top !important;\n    padding: 8px 12px !important;\n    line-height: 1.4 !important;\n}\n\n.semester-courses-table .md-table th {\n    background-color: #0094CE !important;\n    color: white !important;\n    font-weight: bold !important;\n    padding: 10px 12px !important;\n    border-bottom: 2px solid #007bb5 !important;\n}\n\n.semester-courses-table .md-table tr:nth-child(even) {\n    background-color: #f8f9fa !important;\n}\n\n.semester-courses-table .md-table tr:hover {\n    background-color: #e8f4fd !important;\n}\n\n/* Course names column specific styling */\n.semester-courses-table .md-table td:last-child {\n    font-size: 13px !important;\n    max-width: 400px !important;\n}\n\n/* University column styling */\n.semester-courses-table .md-table td:nth-child(3) {\n    font-weight: 500 !important;\n    color: #0c5460 !important;\n}\n\n/* Semester column styling */\n.semester-courses-table .md-table td:first-child {\n    font-weight: bold !important;\n    background-color: #e8f4fd !important;\n    color: #0c5460 !important;\n}\n\n/* Count column styling */\n.semester-courses-table .md-table td:nth-child(2) {\n    font-weight: bold !important;\n    color: #28a745 !important;\n    font-size: 14px !important;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 330,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "610fb7c1abfec3a7",
        "type": "inject",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "üîÑ Load DB on Startup",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "f6b6a91e8fd6a27d",
                "load_universities_for_selector"
            ]
        ]
    },
    {
        "id": "f6b6a91e8fd6a27d",
        "type": "postgresql",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Read PostgreSQL DB",
        "query": "SELECT p.program_name, p.degree, p.language, p.tuition_fee, p.tuition_period, p.start_date, p.source, p.source_url, i.name as institution_name, i.type as institution_type, i.location FROM programmes p JOIN institutions i ON p.inst_id = i.inst_id WHERE p.is_active = true ORDER BY p.created_at DESC",
        "postgreSQLConfig": "postgres_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 440,
        "y": 440,
        "wires": [
            [
                "01c2b672b9e605ab"
            ]
        ]
    },
    {
        "id": "01c2b672b9e605ab",
        "type": "function",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Process DB Results",
        "func": "// Process PostgreSQL results into format expected by dashboard\nif (!Array.isArray(msg.payload)) {\n    node.error('Expected array of results from database');\n    return null;\n}\n\nconst dbResults = msg.payload;\n\n// Transform database results to dashboard format\nconst courses = dbResults.map((row, idx) => ({\n    id: `prog_${idx}`,\n    title: row.program_name,\n    university: row.institution_name,\n    degree: row.degree,\n    language: row.language,\n    tuition: row.tuition_fee,\n    tuitionPeriod: row.tuition_period,\n    startDate: row.start_date,\n    source: row.source,\n    url: row.source_url,\n    location: row.location,\n    institutionType: row.institution_type\n}));\n\n// Group by university for statistics\nconst universityCounts = {};\ncourses.forEach(course => {\n    if (!universityCounts[course.university]) {\n        universityCounts[course.university] = {\n            name: course.university,\n            courses: 0,\n            type: course.institutionType,\n            location: course.location\n        };\n    }\n    universityCounts[course.university].courses++;\n});\n\nconst universities = Object.values(universityCounts);\n\n// Create dashboard data structure\nconst dashboardData = {\n    courses: courses,\n    universities: universities,\n    totalCourses: courses.length,\n    totalUniversities: universities.length,\n    lastUpdated: new Date().toISOString(),\n    newCourses: [] // Would be populated by monitoring flow\n};\n\nmsg.payload = dashboardData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 440,
        "wires": [
            [
                "4387649ad40e0abe"
            ]
        ]
    },
    {
        "id": "4387649ad40e0abe",
        "type": "function",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Set flow context",
        "func": "if(!msg.payload || typeof msg.payload !== 'object') return null;\nconst db = msg.payload;\nflow.set('courses', db.courses || []);\nflow.set('universities', db.universities || []);\nflow.set('newCourses', db.newCourses || []);\nflow.set('lastUpdated', db.lastUpdated || 'Never');\nreturn { payload: 'restored' };",
        "outputs": 1,
        "x": 860,
        "y": 440,
        "wires": [
            [
                "4836d526aba8c061"
            ]
        ]
    },
    {
        "id": "4836d526aba8c061",
        "type": "function",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Load Existing Data",
        "func": "// Load Existing Data from msg.payload (from PostgreSQL)\nconst data = msg.payload || {};\nconst courses = data.courses || flow.get('courses') || [];\nconst universities = data.universities || flow.get('universities') || [];\nconst newCourses = data.newCourses || flow.get('newCourses') || [];\nconst lastUpdated = data.lastUpdated || flow.get('lastUpdated') || 'Never';\n\n// Store in flow context for filters to use\nflow.set('courses', courses);\nflow.set('universities', universities);\nflow.set('newCourses', newCourses);\nflow.set('lastUpdated', lastUpdated);\n\nif (courses.length === 0) {\n    return [\n        { payload: 0, topic: \"total_courses\" },\n        { payload: 0, topic: \"total_universities\" },\n        { payload: lastUpdated, topic: \"last_updated\" },\n        { payload: [], topic: \"university_table\" },\n        { payload: [], topic: \"new_courses\" },\n        { payload: [], topic: \"course_table\" }\n    ];\n}\n\n// Map each uni to include sn, category, and counts\nconst uniData = universities\n    .sort((a, b) => a.name.localeCompare(b.name))\n    .map((uni, idx) => {\n        // determine category\n        const name = uni.name.toLowerCase();\n        let category = 'University';\n        if (name.includes('hochschule') || name.includes('university of applied sciences') || name.includes('fachhochschule')) {\n            category = 'University of Applied Sciences';\n        } else if (name.includes('technische') || name.includes('technical university')) {\n            category = 'Technical University';\n        } else if (name.includes('kunst') || name.includes('art') || name.includes('music')) {\n            category = 'Arts/Music University';\n        }\n        return {\n            sn: idx + 1,\n            name: uni.name,\n            category: category,\n            courses: uni.courses\n        };\n    });\n\n// Initial message for course table (user needs to select university)\nconst courseTableData = [{\n    title: 'üëÜ Please select a university from the dropdown above',\n    university: 'to view all courses offered by that institution',\n    degree: 'üéì',\n    language: 'üó£Ô∏è',\n    tuition: 'üí∞',\n    location: 'üìç'\n}];\n\nreturn [\n    { payload: courses.length, topic: \"total_courses\" },\n    { payload: universities.length, topic: \"total_universities\" },\n    { payload: lastUpdated, topic: \"last_updated\" },\n    { payload: uniData, topic: \"university_table\" },\n    { payload: newCourses.slice(0, 10), topic: \"new_courses\" },\n    { payload: courseTableData, topic: \"course_table\" },\n    { payload: \"init\", topic: \"trigger_filter_init\" } // Trigger filter initialization\n];\n",
        "outputs": 7,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "be6c7eff2c1cd630"
            ],
            [
                "57f94c4b3fbe219c"
            ],
            [
                "4db4717ae5376421"
            ],
            [
                "f0938154c1f233d9"
            ],
            [
                "48dc04fc966d1424"
            ],
            [
                "course_table"
            ],
            [
                "reset_filter_values"
            ]
        ]
    },
    {
        "id": "filter_degree_type",
        "type": "ui_dropdown",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Degree Type",
        "label": "Course Type",
        "tooltip": "Filter by degree type",
        "place": "Select degree type",
        "group": "ui_group_filters",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "multiple": true,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Bachelor's",
                "value": "bachelor",
                "type": "str"
            },
            {
                "label": "Master's",
                "value": "master",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "filter_degree",
        "topicType": "str",
        "className": "",
        "x": 790,
        "y": 700,
        "wires": [
            [
                "apply_filters"
            ]
        ]
    },
    {
        "id": "filter_tuition_fee",
        "type": "ui_dropdown",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Tuition Fee",
        "label": "Tuition Fee",
        "tooltip": "Filter by tuition fee range",
        "place": "Select fee range",
        "group": "ui_group_filters",
        "order": 2,
        "width": "4",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "All Fees",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Free (No Tuition)",
                "value": "no_fee",
                "type": "str"
            },
            {
                "label": "Up to ‚Ç¨500",
                "value": "up_to_500",
                "type": "str"
            },
            {
                "label": "Affordable (Free or ‚â§‚Ç¨500)",
                "value": "affordable",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "filter_fee",
        "topicType": "str",
        "className": "",
        "x": 790,
        "y": 760,
        "wires": [
            [
                "apply_filters"
            ]
        ]
    },
    {
        "id": "filter_language",
        "type": "ui_dropdown",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Course Language",
        "label": "Language",
        "tooltip": "Filter by course language",
        "place": "Select language",
        "group": "ui_group_filters",
        "order": 3,
        "width": "4",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "English",
                "value": "english",
                "type": "str"
            },
            {
                "label": "German",
                "value": "german",
                "type": "str"
            },
            {
                "label": "English or German",
                "value": "en_de",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "filter_language",
        "topicType": "str",
        "className": "",
        "x": 810,
        "y": 820,
        "wires": [
            [
                "apply_filters"
            ]
        ]
    },
    {
        "id": "apply_filters",
        "type": "function",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Apply Filters",
        "func": "// Store filter values in context\nconst topic = msg.topic;\nconst value = msg.payload;\n\n// Initialize filters if not exist\nlet filters = flow.get('courseFilters') || {\n    degree: ['all'],\n    fee: 'all',\n    language: 'all'\n};\n\n// Update the specific filter\nif (topic === 'filter_degree') {\n    filters.degree = Array.isArray(value) ? value : [value];\n} else if (topic === 'filter_fee') {\n    filters.fee = value;\n} else if (topic === 'filter_language') {\n    filters.language = value;\n}\n\n// Store updated filters\nflow.set('courseFilters', filters);\n\n// Get all courses and universities\nconst allCourses = flow.get('courses') || [];\nconst allUniversities = flow.get('universities') || [];\n\n// Apply filters to courses\nlet filteredCourses = allCourses.filter(course => {\n    // Degree filter\n    if (!filters.degree.includes('all')) {\n        const degreeMatch = filters.degree.some(deg => {\n            if (deg === 'bachelor') {\n                return course.degree && (course.degree.toLowerCase().includes('bachelor') || course.degree.toLowerCase().includes('b.'));\n            } else if (deg === 'master') {\n                return course.degree && (course.degree.toLowerCase().includes('master') || course.degree.toLowerCase().includes('m.'));\n            } else if (deg === 'phd') {\n                return course.degree && (course.degree.toLowerCase().includes('phd') || course.degree.toLowerCase().includes('ph.d') || course.degree.toLowerCase().includes('doctor'));\n            }\n            return false;\n        });\n        if (!degreeMatch) return false;\n    }\n    \n    // Fee filter - improved logic\n    if (filters.fee !== 'all') {\n        const feeValue = course.tuition_fee || course.tuition || course.fees || 0;\n        const feeNumber = parseFloat(feeValue) || 0;\n        \n        if (filters.fee === 'no_fee') {\n            // Only courses with 0 fee\n            if (feeNumber > 0) return false;\n        } else if (filters.fee === 'up_to_500') {\n            // Courses with fee <= 500 EUR\n            if (feeNumber > 500) return false;\n        } else if (filters.fee === 'affordable') {\n            // No fee OR up to 500 EUR\n            if (feeNumber > 500) return false;\n        }\n    }\n    \n    // Language filter\n    if (filters.language !== 'all') {\n        const langText = (course.language || '').toLowerCase();\n        if (filters.language === 'english') {\n            if (!langText.includes('english')) return false;\n        } else if (filters.language === 'german') {\n            if (!langText.includes('german') && !langText.includes('deutsch')) return false;\n        } else if (filters.language === 'en_de') {\n            if (!langText.includes('english') && !langText.includes('german') && !langText.includes('deutsch')) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n});\n\n// Calculate filtered university counts\nconst universityCourseCounts = {};\nfilteredCourses.forEach(course => {\n    const uniName = course.university || course.institution_name || course.institution || 'Unknown';\n    if (!universityCourseCounts[uniName]) {\n        universityCourseCounts[uniName] = 0;\n    }\n    universityCourseCounts[uniName]++;\n});\n\n// Update university data with filtered counts\nconst filteredUniversities = allUniversities.map((uni, idx) => {\n    const filteredCount = universityCourseCounts[uni.name] || 0;\n    if (filteredCount === 0) return null; // Hide universities with no matching courses\n    \n    // Determine category\n    const name = uni.name.toLowerCase();\n    let category = 'University';\n    if (name.includes('hochschule') || name.includes('university of applied sciences') || name.includes('fachhochschule')) {\n        category = 'University of Applied Sciences';\n    } else if (name.includes('technische') || name.includes('technical university')) {\n        category = 'Technical University';\n    } else if (name.includes('kunst') || name.includes('art') || name.includes('music')) {\n        category = 'Arts/Music University';\n    }\n    \n    return {\n        sn: idx + 1,\n        name: uni.name,\n        category: category,\n        courses: filteredCount\n    };\n}).filter(uni => uni !== null)\n  .sort((a, b) => a.name.localeCompare(b.name))\n  .map((uni, idx) => ({ ...uni, sn: idx + 1 })); // Re-number after filtering\n\n// Format filtered courses for table display (limit to first 100 for performance)\nconst filteredCourseTableData = filteredCourses.slice(0, 100).map(course => {\n    const feeValue = course.tuition_fee || course.tuition || course.fees || 0;\n    const feeNumber = parseFloat(feeValue) || 0;\n    let tuitionDisplay = 'Free';\n    \n    if (feeNumber > 0) {\n        tuitionDisplay = `‚Ç¨${feeNumber}`;\n        // Add period if available\n        const period = course.tuition_period || 'semester';\n        if (period && period !== 'course') {\n            tuitionDisplay += `/${period}`;\n        }\n    }\n    \n    return {\n        title: course.title || course.program_name,\n        university: course.university || course.institution_name || course.institution,\n        degree: course.degree,\n        language: course.language,\n        tuition: tuitionDisplay,\n        location: course.location || 'Germany'\n    };\n});\n\n// Create university selector options from filtered universities\nconst universityOptions = [\"üèõÔ∏è Select a University\"];\nfilteredUniversities.forEach(uni => {\n    universityOptions.push(`${uni.name} (${uni.courses} courses)`);\n});\n\n// Return updated data\nreturn [\n    { payload: filteredCourses.length, topic: \"total_courses\" },\n    { payload: filteredUniversities.length, topic: \"total_universities\" },\n    { payload: filteredUniversities, topic: \"university_table\" },\n    { payload: filteredCourseTableData, topic: \"course_table\" },\n    { options: universityOptions, payload: \"\" } // Update university selector\n];",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 760,
        "wires": [
            [
                "be6c7eff2c1cd630"
            ],
            [
                "57f94c4b3fbe219c"
            ],
            [
                "f0938154c1f233d9"
            ],
            [
                "course_table"
            ],
            [
                "university_selector"
            ]
        ]
    },
    {
        "id": "reset_filter_values",
        "type": "function",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Reset Filter Values",
        "func": "// Reset all filters to default\nflow.set('courseFilters', {\n    degree: ['all'],\n    fee: 'all',\n    language: 'all'\n});\n\n// Get original data\nconst courses = flow.get('courses') || [];\nconst universities = flow.get('universities') || [];\nconst lastUpdated = flow.get('lastUpdated') || 'Never';\n\n// Prepare original university data\nconst uniData = universities\n    .sort((a, b) => a.name.localeCompare(b.name))\n    .map((uni, idx) => {\n        const name = uni.name.toLowerCase();\n        let category = 'University';\n        if (name.includes('hochschule') || name.includes('university of applied sciences') || name.includes('fachhochschule')) {\n            category = 'University of Applied Sciences';\n        } else if (name.includes('technische') || name.includes('technical university')) {\n            category = 'Technical University';\n        } else if (name.includes('kunst') || name.includes('art') || name.includes('music')) {\n            category = 'Arts/Music University';\n        }\n        return {\n            sn: idx + 1,\n            name: uni.name,\n            category: category,\n            courses: uni.courses\n        };\n    });\n\n// Create university selector options from all universities\nconst universityOptions = [\"üèõÔ∏è Select a University\"];\nuniversities.forEach(uni => {\n    universityOptions.push(`${uni.name} (${uni.courses} courses)`);\n});\n\n// Send reset values to dropdowns and update dashboard\nreturn [\n    { payload: courses.length, topic: \"total_courses\" },\n    { payload: universities.length, topic: \"total_universities\" },\n    { payload: uniData, topic: \"university_table\" },\n    { payload: ['all'], topic: \"filter_degree\" },\n    { payload: 'all', topic: \"filter_fee\" },\n    { payload: 'all', topic: \"filter_language\" },\n    { options: universityOptions, payload: \"\" } // Reset university selector\n];",
        "outputs": 7,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 680,
        "wires": [
            [
                "be6c7eff2c1cd630"
            ],
            [
                "57f94c4b3fbe219c"
            ],
            [
                "f0938154c1f233d9"
            ],
            [
                "filter_degree_type"
            ],
            [
                "filter_tuition_fee"
            ],
            [
                "filter_language"
            ],
            [
                "university_selector"
            ]
        ]
    },
    {
        "id": "init_filters",
        "type": "inject",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Initialize Filters",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 2,
        "topic": "init_filters",
        "payload": "",
        "payloadType": "str",
        "x": 200,
        "y": 740,
        "wires": [
            [
                "reset_filter_values"
            ]
        ]
    },
    {
        "id": "university_selector",
        "type": "ui_dropdown",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "University Selector",
        "label": "Select University",
        "tooltip": "Choose a university to view its courses",
        "place": "Select a university",
        "group": "ui_group_filters",
        "order": 0,
        "width": "8",
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "selected_university",
        "topicType": "str",
        "className": "",
        "x": 1650,
        "y": 440,
        "wires": [
            [
                "filter_courses_by_university"
            ]
        ]
    },
    {
        "id": "filter_courses_by_university",
        "type": "function",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Filter Courses by University",
        "func": "// Get selected university\nconst selectedUniversity = msg.payload;\n\n// Get all courses and current filters from flow context\nconst allCourses = flow.get('courses') || [];\nconst filters = flow.get('courseFilters') || {\n    degree: ['all'],\n    fee: 'all',\n    language: 'all'\n};\n\nif (!selectedUniversity || selectedUniversity === 'all' || selectedUniversity.includes('Select a University')) {\n    // Show message to select a university\n    const selectMessage = [{\n        title: 'Please select a university from the dropdown above',\n        university: 'to view courses offered by that institution',\n        degree: '---',\n        language: '---',\n        tuition: '---',\n        location: '---'\n    }];\n    \n    return { payload: selectMessage, topic: \"course_table\" };\n}\n\n// Extract university name from the display format \"University Name (X courses)\"\nlet universityName = selectedUniversity;\nif (selectedUniversity.includes(' (') && selectedUniversity.includes(' courses)')) {\n    universityName = selectedUniversity.split(' (')[0];\n}\n\nnode.log(`Filtering courses for university: ${universityName}`);\nnode.log(`Current filters:`, filters);\n\n// First filter by university, then apply other filters\nlet universityCourses = allCourses.filter(course => {\n    const courseUniversity = course.university || course.institution_name || course.institution || '';\n    return courseUniversity.toLowerCase().includes(universityName.toLowerCase());\n});\n\n// Apply additional filters to university courses\nlet filteredCourses = universityCourses.filter(course => {\n    // Degree filter\n    if (!filters.degree.includes('all')) {\n        const degreeMatch = filters.degree.some(deg => {\n            if (deg === 'bachelor') {\n                return course.degree && (course.degree.toLowerCase().includes('bachelor') || course.degree.toLowerCase().includes('b.'));\n            } else if (deg === 'master') {\n                return course.degree && (course.degree.toLowerCase().includes('master') || course.degree.toLowerCase().includes('m.'));\n            } else if (deg === 'phd') {\n                return course.degree && (course.degree.toLowerCase().includes('phd') || course.degree.toLowerCase().includes('ph.d') || course.degree.toLowerCase().includes('doctor'));\n            }\n            return false;\n        });\n        if (!degreeMatch) return false;\n    }\n    \n    // Fee filter - improved logic\n    if (filters.fee !== 'all') {\n        const feeValue = course.tuition_fee || course.tuition || course.fees || 0;\n        const feeNumber = parseFloat(feeValue) || 0;\n        \n        if (filters.fee === 'no_fee') {\n            // Only courses with 0 fee or explicitly marked as free\n            if (feeNumber > 0) return false;\n        } else if (filters.fee === 'up_to_500') {\n            // Courses with fee <= 500 EUR\n            if (feeNumber > 500) return false;\n        } else if (filters.fee === 'affordable') {\n            // No fee OR up to 500 EUR\n            if (feeNumber > 500) return false;\n        }\n    }\n    \n    // Language filter\n    if (filters.language !== 'all') {\n        const langText = (course.language || '').toLowerCase();\n        if (filters.language === 'english') {\n            if (!langText.includes('english')) return false;\n        } else if (filters.language === 'german') {\n            if (!langText.includes('german') && !langText.includes('deutsch')) return false;\n        } else if (filters.language === 'en_de') {\n            if (!langText.includes('english') && !langText.includes('german') && !langText.includes('deutsch')) {\n                return false;\n            }\n        }\n    }\n    \n    return true;\n});\n\nnode.log(`Found ${filteredCourses.length} filtered courses for ${universityName}`);\n\n// Format courses for table display with improved tuition display\nconst courseTableData = filteredCourses.map(course => {\n    const feeValue = course.tuition_fee || course.tuition || course.fees || 0;\n    const feeNumber = parseFloat(feeValue) || 0;\n    let tuitionDisplay = 'Free';\n    \n    if (feeNumber > 0) {\n        tuitionDisplay = `‚Ç¨${feeNumber}`;\n        // Add period if available\n        const period = course.tuition_period || 'semester';\n        if (period && period !== 'course') {\n            tuitionDisplay += `/${period}`;\n        }\n    }\n    \n    return {\n        title: course.title || course.program_name,\n        university: course.university || course.institution_name || course.institution,\n        degree: course.degree,\n        language: course.language,\n        tuition: tuitionDisplay,\n        location: course.location || 'Germany'\n    };\n});\n\nif (courseTableData.length === 0) {\n    const noCoursesMessage = [{\n        title: `No courses found for \"${universityName}\" with current filters`,\n        university: 'Try adjusting your filters or selecting a different university',\n        degree: '---',\n        language: '---',\n        tuition: '---',\n        location: '---'\n    }];\n    \n    return { payload: noCoursesMessage, topic: \"course_table\" };\n}\n\nreturn { payload: courseTableData, topic: \"course_table\" };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 360,
        "wires": [
            [
                "course_table"
            ]
        ]
    },
    {
        "id": "populate_university_selector",
        "type": "function",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Populate University Selector",
        "func": "// Transform database results into dropdown options\nconst dbResults = msg.payload;\n\nnode.log(`Received ${dbResults ? dbResults.length : 0} universities from database`);\n\nif (!Array.isArray(dbResults) || dbResults.length === 0) {\n    node.warn(\"No university data received\");\n    // Send message to update dropdown with no options\n    return {\n        options: [\"üèõÔ∏è No Universities Available\"],\n        payload: \"\"\n    };\n}\n\n// Create options array with default option\nconst options = [\"üèõÔ∏è Select a University\"];\n\n// Add university options from database\ndbResults.forEach((row, index) => {\n    if (row && row.name) {\n        const courseCount = parseInt(row.course_count) || 0;\n        options.push(`${row.name} (${courseCount} courses)`);\n        \n        // Log first few entries for debugging\n        if (index < 3) {\n            node.log(`Added university: ${row.name} with ${courseCount} courses`);\n        }\n    }\n});\n\nnode.log(`Successfully populated ${options.length - 1} universities`);\n\n// Return message to update dropdown options\n// For Node-RED UI dropdown, we need to send the options in msg.options\nreturn {\n    options: options,\n    payload: \"\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 460,
        "wires": [
            [
                "university_selector"
            ]
        ]
    },
    {
        "id": "load_universities_for_selector",
        "type": "postgresql",
        "z": "main_tab",
        "g": "ea553a0b38d67ae1",
        "name": "Load Universities for Selector",
        "query": "SELECT i.name, COUNT(p.prog_id) as course_count FROM institutions i JOIN programmes p ON i.inst_id = p.inst_id WHERE p.is_active = true GROUP BY i.inst_id, i.name ORDER BY i.name",
        "postgreSQLConfig": "postgres_config",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 470,
        "y": 360,
        "wires": [
            [
                "populate_university_selector"
            ]
        ]
    },
    {
        "id": "reset_filters",
        "type": "ui_button",
        "z": "main_tab",
        "g": "6b00bc2cfff9870a",
        "name": "Reset Filters",
        "group": "ui_group_filters",
        "order": 4,
        "width": "2",
        "height": "1",
        "label": "Reset",
        "tooltip": "Reset all filters",
        "color": "",
        "bgcolor": "#0094CE",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "reset_filters",
        "topicType": "str",
        "x": 190,
        "y": 640,
        "wires": [
            [
                "reset_filter_values"
            ]
        ]
    },
    {
        "id": "e88871c03a08b266",
        "type": "function",
        "z": "api_tab",
        "g": "3c03637913376ef3",
        "name": "Update Main Dashboard",
        "func": "// ‚Ä¶ your existing stats + uniData logic ‚Ä¶\n// then fire link out:\nreturn msg;",
        "outputs": 1,
        "x": 270,
        "y": 840,
        "wires": [
            [
                "d2410cdfd6a1ab2c"
            ]
        ]
    },
    {
        "id": "d2410cdfd6a1ab2c",
        "type": "link out",
        "z": "api_tab",
        "g": "3c03637913376ef3",
        "name": "reload dashboard",
        "links": [
            "reload_dash_link"
        ],
        "x": 495,
        "y": 840,
        "wires": []
    },
    {
        "id": "clear_dashboard_after_flush",
        "type": "function",
        "z": "api_tab",
        "g": "c19452ddee5fb968",
        "name": "Clear Dashboard UI",
        "func": "// Send clear messages to all dashboard UI components\nreturn [\n    { payload: 0, topic: \"total_courses\" },\n    { payload: 0, topic: \"total_universities\" },\n    { payload: 'Never', topic: \"last_updated\" },\n    { payload: [], topic: \"university_table\" },\n    { payload: [], topic: \"new_courses\" },\n    { payload: ['all'], topic: \"filter_degree\" },\n    { payload: 'all', topic: \"filter_fee\" },\n    { payload: 'all', topic: \"filter_language\" }\n];",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 660,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "daily-trigger",
        "type": "inject",
        "z": "monitor_tab",
        "name": "Daily ETL Trigger (2 AM)",
        "repeat": "",
        "crontab": "00 02 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "run-etl"
            ]
        ]
    },
    {
        "id": "manual-trigger",
        "type": "inject",
        "z": "monitor_tab",
        "name": "Manual Test",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "run-etl"
            ]
        ]
    },
    {
        "id": "run-etl",
        "type": "exec",
        "z": "monitor_tab",
        "command": "python3 /opt/scrapers/etl_pipeline.py",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run ETL Pipeline",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "parse-etl-output"
            ],
            [
                "etl-error"
            ],
            [
                "etl-error"
            ]
        ]
    },
    {
        "id": "parse-etl-output",
        "type": "function",
        "z": "monitor_tab",
        "name": "Parse ETL Stats",
        "func": "try {\n    const stats = JSON.parse(msg.payload);\n    msg.etl_stats = stats;\n    node.status({fill:\"green\",shape:\"dot\",text:`${stats.new_programmes} new programmes`});\n    return msg;\n} catch (e) {\n    node.error('Failed to parse ETL output: ' + e.message);\n    node.status({fill:\"red\",shape:\"ring\",text:\"Parse error\"});\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "check-new-programmes"
            ]
        ]
    },
    {
        "id": "check-new-programmes",
        "type": "switch",
        "z": "monitor_tab",
        "name": "Check New Programmes",
        "property": "etl_stats.new_programmes",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 240,
        "wires": [
            [
                "query-new-programmes"
            ],
            [
                "log-no-new"
            ]
        ]
    },
    {
        "id": "query-new-programmes",
        "type": "function",
        "z": "monitor_tab",
        "name": "Query New Programmes",
        "func": "// Since we don't have PostgreSQL node installed, simulate the query\n// In production, you would use node-red-contrib-postgresql\nconst newProgrammes = [\n    {\n        program_name: \"Master of Data Science\",\n        institution: \"Technical University of Munich\",\n        degree: \"M.Sc.\",\n        language: \"English\",\n        tuition_fee: 0,\n        start_date: \"Winter 2024\",\n        source_url: \"https://example.com/program1\"\n    }\n];\n\nmsg.payload = newProgrammes;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 120,
        "wires": [
            [
                "format-notification"
            ]
        ]
    },
    {
        "id": "format-notification",
        "type": "function",
        "z": "monitor_tab",
        "name": "Format Notification",
        "func": "const programmes = msg.payload;\nif (!programmes || programmes.length === 0) {\n    return null;\n}\n\nlet message = `üéì New English-taught Programmes in Germany (${new Date().toDateString()})\\n\\n`;\n\nprogrammes.forEach((prog, index) => {\n    const tuition = prog.tuition_fee > 0 ? `‚Ç¨${prog.tuition_fee}/semester` : 'Tuition-free';\n    const startDate = prog.start_date || 'TBA';\n    \n    message += `${index + 1}. ${prog.program_name}\\n`;\n    message += `   üèõÔ∏è ${prog.institution}\\n`;\n    message += `   üéì ${prog.degree}\\n`;\n    message += `   üí∞ ${tuition}\\n`;\n    message += `   üìÖ Start: ${startDate}\\n`;\n    if (prog.source_url) {\n        message += `   üîó ${prog.source_url}\\n`;\n    }\n    message += `\\n`;\n});\n\nmessage += `Total: ${programmes.length} new programme(s)`;\n\nmsg.payload = message;\nmsg.subject = `New English Programmes in Germany - ${programmes.length} found`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 120,
        "wires": [
            [
                "notification-output"
            ]
        ]
    },
    {
        "id": "notification-output",
        "type": "debug",
        "z": "monitor_tab",
        "name": "Notification Ready",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 100,
        "wires": []
    },
    {
        "id": "log-no-new",
        "type": "debug",
        "z": "monitor_tab",
        "name": "No New Programmes",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 1260,
        "y": 240,
        "wires": []
    },
    {
        "id": "etl-error",
        "type": "debug",
        "z": "monitor_tab",
        "name": "ETL Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 560,
        "y": 320,
        "wires": []
    }
]